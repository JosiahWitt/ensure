// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: StringTransformable, NumberTransformable)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockStringTransformable is a mock of the StringTransformable interface in pkgs/pkg1.
type MockStringTransformable struct {
	ctrl     *gomock.Controller
	recorder *MockStringTransformableMockRecorder
}

// MockStringTransformableMockRecorder is the mock recorder for MockStringTransformable.
type MockStringTransformableMockRecorder struct {
	mock *MockStringTransformable
}

// NewMockStringTransformable creates a new mock instance.
func NewMockStringTransformable(ctrl *gomock.Controller) *MockStringTransformable {
	mock := &MockStringTransformable{ctrl: ctrl}
	mock.recorder = &MockStringTransformableMockRecorder{mock}
	return mock
}

// NEW creates a MockStringTransformable. This method is used internally by ensure.
func (*MockStringTransformable) NEW(ctrl *gomock.Controller) *MockStringTransformable {
	return NewMockStringTransformable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockStringTransformable) EXPECT() *MockStringTransformableMockRecorder {
	return m.recorder
}

// TransformString mocks TransformString on StringTransformable.
func (m *MockStringTransformable) TransformString(_prefix string, _str string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformString", _prefix, _str)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransformString sets up expectations for calls to TransformString.
// Calling this method multiple times allows expecting multiple calls to TransformString with a variety of parameters.
func (mr *MockStringTransformableMockRecorder) TransformString(_prefix, _str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformString", reflect.TypeOf((*MockStringTransformable)(nil).TransformString), _prefix, _str)
}

// MockNumberTransformable is a mock of the NumberTransformable interface in pkgs/pkg1.
type MockNumberTransformable struct {
	ctrl     *gomock.Controller
	recorder *MockNumberTransformableMockRecorder
}

// MockNumberTransformableMockRecorder is the mock recorder for MockNumberTransformable.
type MockNumberTransformableMockRecorder struct {
	mock *MockNumberTransformable
}

// NewMockNumberTransformable creates a new mock instance.
func NewMockNumberTransformable(ctrl *gomock.Controller) *MockNumberTransformable {
	mock := &MockNumberTransformable{ctrl: ctrl}
	mock.recorder = &MockNumberTransformableMockRecorder{mock}
	return mock
}

// NEW creates a MockNumberTransformable. This method is used internally by ensure.
func (*MockNumberTransformable) NEW(ctrl *gomock.Controller) *MockNumberTransformable {
	return NewMockNumberTransformable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockNumberTransformable) EXPECT() *MockNumberTransformableMockRecorder {
	return m.recorder
}

// TransformInt mocks TransformInt on NumberTransformable.
func (m *MockNumberTransformable) TransformInt(_i int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformInt", _i)
	ret0, _ := ret[0].(int)
	return ret0
}

// TransformInt sets up expectations for calls to TransformInt.
// Calling this method multiple times allows expecting multiple calls to TransformInt with a variety of parameters.
func (mr *MockNumberTransformableMockRecorder) TransformInt(_i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformInt", reflect.TypeOf((*MockNumberTransformable)(nil).TransformInt), _i)
}

// TransformFloat64 mocks TransformFloat64 on NumberTransformable.
func (m *MockNumberTransformable) TransformFloat64(_f float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformFloat64", _f)
	ret0, _ := ret[0].(float64)
	return ret0
}

// TransformFloat64 sets up expectations for calls to TransformFloat64.
// Calling this method multiple times allows expecting multiple calls to TransformFloat64 with a variety of parameters.
func (mr *MockNumberTransformableMockRecorder) TransformFloat64(_f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformFloat64", reflect.TypeOf((*MockNumberTransformable)(nil).TransformFloat64), _f)
}
