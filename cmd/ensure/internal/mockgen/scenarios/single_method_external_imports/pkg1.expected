// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: Transformable)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	"github.com/golang/mock/gomock"
	"pkgs/external1"
	"pkgs/external2"
	"reflect"
)

// MockTransformable is a mock of the Transformable interface in pkgs/pkg1.
type MockTransformable struct {
	ctrl     *gomock.Controller
	recorder *MockTransformableMockRecorder
}

// MockTransformableMockRecorder is the mock recorder for MockTransformable.
type MockTransformableMockRecorder struct {
	mock *MockTransformable
}

// NewMockTransformable creates a new mock instance.
func NewMockTransformable(ctrl *gomock.Controller) *MockTransformable {
	mock := &MockTransformable{ctrl: ctrl}
	mock.recorder = &MockTransformableMockRecorder{mock}
	return mock
}

// NEW creates a MockTransformable. This method is used internally by ensure.
func (*MockTransformable) NEW(ctrl *gomock.Controller) *MockTransformable {
	return NewMockTransformable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockTransformable) EXPECT() *MockTransformableMockRecorder {
	return m.recorder
}

// Transform mocks Transform on Transformable.
func (m *MockTransformable) Transform(_user *external1.User, _message *external2.Message) external1.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", _user, _message)
	ret0, _ := ret[0].(external1.String)
	return ret0
}

// Transform sets up expectations for calls to Transform.
// Calling this method multiple times allows expecting multiple calls to Transform with a variety of parameters.
//
// Inputs:
//
//  user *external1.User
//  message *external2.Message
//
// Outputs:
//
//  external1.String
func (mr *MockTransformableMockRecorder) Transform(_user, _message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformable)(nil).Transform), _user, _message)
}
