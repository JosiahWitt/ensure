// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: Doable)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	gomock2 "github.com/golang/mock/gomock"
	"pkgs/gomock"
	"pkgs/reflect"
	reflect2 "reflect"
)

// MockDoable is a mock of the Doable interface in pkgs/pkg1.
type MockDoable struct {
	ctrl     *gomock2.Controller
	recorder *MockDoableMockRecorder
}

// MockDoableMockRecorder is the mock recorder for MockDoable.
type MockDoableMockRecorder struct {
	mock *MockDoable
}

// NewMockDoable creates a new mock instance.
func NewMockDoable(ctrl *gomock2.Controller) *MockDoable {
	mock := &MockDoable{ctrl: ctrl}
	mock.recorder = &MockDoableMockRecorder{mock}
	return mock
}

// NEW creates a MockDoable. This method is used internally by ensure.
func (*MockDoable) NEW(ctrl *gomock2.Controller) *MockDoable {
	return NewMockDoable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockDoable) EXPECT() *MockDoableMockRecorder {
	return m.recorder
}

// Do mocks Do on Doable.
func (m *MockDoable) Do(_thing *reflect.Thing, _other *gomock.Other) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", _thing, _other)
	var _ = ret // Unused, since there are no returns
	return
}

// Do sets up expectations for calls to Do.
// Calling this method multiple times allows expecting multiple calls to Do with a variety of parameters.
//
// Inputs:
//
//  thing *reflect.Thing
//  other *gomock.Other
//
// Outputs:
//
//  none
func (mr *MockDoableMockRecorder) Do(_thing, _other interface{}) *gomock2.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect2.TypeOf((*MockDoable)(nil).Do), _thing, _other)
}
