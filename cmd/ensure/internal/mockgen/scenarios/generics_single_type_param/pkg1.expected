// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: Identifier)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockIdentifier is a mock of the Identifier interface in pkgs/pkg1.
type MockIdentifier[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifierMockRecorder[T]
}

// MockIdentifierMockRecorder is the mock recorder for MockIdentifier.
type MockIdentifierMockRecorder[T any] struct {
	mock *MockIdentifier[T]
}

// NewMockIdentifier creates a new mock instance.
func NewMockIdentifier[T any](ctrl *gomock.Controller) *MockIdentifier[T] {
	mock := &MockIdentifier[T]{ctrl: ctrl}
	mock.recorder = &MockIdentifierMockRecorder[T]{mock}
	return mock
}

// NEW creates a MockIdentifier. This method is used internally by ensure.
func (*MockIdentifier[T]) NEW(ctrl *gomock.Controller) *MockIdentifier[T] {
	return NewMockIdentifier[T](ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockIdentifier[T]) EXPECT() *MockIdentifierMockRecorder[T] {
	return m.recorder
}

// Identity mocks Identity on Identifier.
func (m *MockIdentifier[T]) Identity(_in T) T {
	m.ctrl.T.Helper()
	inputs := []interface{}{_in}
	ret := m.ctrl.Call(m, "Identity", inputs...)
	ret0, _ := ret[0].(T)
	return ret0
}

// Identity sets up expectations for calls to Identity.
// Calling this method multiple times allows expecting multiple calls to Identity with a variety of parameters.
//
// Inputs:
//
//	in T
//
// Outputs:
//
//	T
func (mr *MockIdentifierMockRecorder[T]) Identity(_in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_in}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockIdentifier[T])(nil).Identity), inputs...)
}
