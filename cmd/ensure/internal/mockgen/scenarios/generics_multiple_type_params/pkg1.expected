// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: Thingable)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	"github.com/golang/mock/gomock"
	"pkgs/constraints"
	"pkgs/thingy"
	"reflect"
)

// MockThingable is a mock of the Thingable interface in pkgs/pkg1.
type MockThingable[T constraints.Complex, V thingy.Constraint] struct {
	ctrl     *gomock.Controller
	recorder *MockThingableMockRecorder[T, V]
}

// MockThingableMockRecorder is the mock recorder for MockThingable.
type MockThingableMockRecorder[T constraints.Complex, V thingy.Constraint] struct {
	mock *MockThingable[T, V]
}

// NewMockThingable creates a new mock instance.
func NewMockThingable[T constraints.Complex, V thingy.Constraint](ctrl *gomock.Controller) *MockThingable[T, V] {
	mock := &MockThingable[T, V]{ctrl: ctrl}
	mock.recorder = &MockThingableMockRecorder[T, V]{mock}
	return mock
}

// NEW creates a MockThingable. This method is used internally by ensure.
func (*MockThingable[T, V]) NEW(ctrl *gomock.Controller) *MockThingable[T, V] {
	return NewMockThingable[T, V](ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockThingable[T, V]) EXPECT() *MockThingableMockRecorder[T, V] {
	return m.recorder
}

// Identity mocks Identity on Thingable.
func (m *MockThingable[T, V]) Identity(_in T) T {
	m.ctrl.T.Helper()
	inputs := []interface{}{_in}
	ret := m.ctrl.Call(m, "Identity", inputs...)
	ret0, _ := ret[0].(T)
	return ret0
}

// Identity sets up expectations for calls to Identity.
// Calling this method multiple times allows expecting multiple calls to Identity with a variety of parameters.
//
// Inputs:
//
//	in T
//
// Outputs:
//
//	T
func (mr *MockThingableMockRecorder[T, V]) Identity(_in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_in}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockThingable[T, V])(nil).Identity), inputs...)
}

// Transform mocks Transform on Thingable.
func (m *MockThingable[T, V]) Transform(_in T) V {
	m.ctrl.T.Helper()
	inputs := []interface{}{_in}
	ret := m.ctrl.Call(m, "Transform", inputs...)
	ret0, _ := ret[0].(V)
	return ret0
}

// Transform sets up expectations for calls to Transform.
// Calling this method multiple times allows expecting multiple calls to Transform with a variety of parameters.
//
// Inputs:
//
//	in T
//
// Outputs:
//
//	V
func (mr *MockThingableMockRecorder[T, V]) Transform(_in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_in}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockThingable[T, V])(nil).Transform), inputs...)
}
