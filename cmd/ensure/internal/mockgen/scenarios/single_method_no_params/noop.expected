// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/noop (interfaces: Noopable)

// Package mock_noop is a generated GoMock package.
package mock_noop

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockNoopable is a mock of the Noopable interface in pkgs/noop.
type MockNoopable struct {
	ctrl     *gomock.Controller
	recorder *MockNoopableMockRecorder
}

// MockNoopableMockRecorder is the mock recorder for MockNoopable.
type MockNoopableMockRecorder struct {
	mock *MockNoopable
}

// NewMockNoopable creates a new mock instance.
func NewMockNoopable(ctrl *gomock.Controller) *MockNoopable {
	mock := &MockNoopable{ctrl: ctrl}
	mock.recorder = &MockNoopableMockRecorder{mock}
	return mock
}

// NEW creates a MockNoopable. This method is used internally by ensure.
func (*MockNoopable) NEW(ctrl *gomock.Controller) *MockNoopable {
	return NewMockNoopable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockNoopable) EXPECT() *MockNoopableMockRecorder {
	return m.recorder
}

// Noop mocks Noop on Noopable.
func (m *MockNoopable) Noop() {
	m.ctrl.T.Helper()
	inputs := []interface{}{}
	ret := m.ctrl.Call(m, "Noop", inputs...)
	var _ = ret // Unused, since there are no returns
	return
}

// Noop sets up expectations for calls to Noop.
// Calling this method multiple times allows expecting multiple calls to Noop with a variety of parameters.
//
// Inputs:
//
//	none
//
// Outputs:
//
//	none
func (mr *MockNoopableMockRecorder) Noop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Noop", reflect.TypeOf((*MockNoopable)(nil).Noop), inputs...)
}
