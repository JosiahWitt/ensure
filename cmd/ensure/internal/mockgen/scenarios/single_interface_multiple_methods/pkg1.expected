// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: pkgs/pkg1 (interfaces: Transformable)

// Package mock_pkg1 is a generated GoMock package.
package mock_pkg1

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockTransformable is a mock of the Transformable interface in pkgs/pkg1.
type MockTransformable struct {
	ctrl     *gomock.Controller
	recorder *MockTransformableMockRecorder
}

// MockTransformableMockRecorder is the mock recorder for MockTransformable.
type MockTransformableMockRecorder struct {
	mock *MockTransformable
}

// NewMockTransformable creates a new mock instance.
func NewMockTransformable(ctrl *gomock.Controller) *MockTransformable {
	mock := &MockTransformable{ctrl: ctrl}
	mock.recorder = &MockTransformableMockRecorder{mock}
	return mock
}

// NEW creates a MockTransformable. This method is used internally by ensure.
func (*MockTransformable) NEW(ctrl *gomock.Controller) *MockTransformable {
	return NewMockTransformable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockTransformable) EXPECT() *MockTransformableMockRecorder {
	return m.recorder
}

// TransformString mocks TransformString on Transformable.
func (m *MockTransformable) TransformString(_prefix string, _str string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformString", _prefix, _str)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransformString sets up expectations for calls to TransformString.
// Calling this method multiple times allows expecting multiple calls to TransformString with a variety of parameters.
//
// Inputs:
//
//  prefix string
//  str string
//
// Outputs:
//
//  string
//  error
func (mr *MockTransformableMockRecorder) TransformString(_prefix, _str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformString", reflect.TypeOf((*MockTransformable)(nil).TransformString), _prefix, _str)
}

// TransformFloat64 mocks TransformFloat64 on Transformable.
func (m *MockTransformable) TransformFloat64(_f float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformFloat64", _f)
	ret0, _ := ret[0].(float64)
	return ret0
}

// TransformFloat64 sets up expectations for calls to TransformFloat64.
// Calling this method multiple times allows expecting multiple calls to TransformFloat64 with a variety of parameters.
//
// Inputs:
//
//  f float64
//
// Outputs:
//
//  float64
func (mr *MockTransformableMockRecorder) TransformFloat64(_f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformFloat64", reflect.TypeOf((*MockTransformable)(nil).TransformFloat64), _f)
}
