// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: github.com/JosiahWitt/ensure/cmd/ensure/internal/ifacereader (interfaces: Readable)

// Package mock_ifacereader is a generated GoMock package.
package mock_ifacereader

import (
	"github.com/JosiahWitt/ensure/cmd/ensure/internal/ifacereader"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockReadable is a mock of the Readable interface in github.com/JosiahWitt/ensure/cmd/ensure/internal/ifacereader.
type MockReadable struct {
	ctrl     *gomock.Controller
	recorder *MockReadableMockRecorder
}

// MockReadableMockRecorder is the mock recorder for MockReadable.
type MockReadableMockRecorder struct {
	mock *MockReadable
}

// NewMockReadable creates a new mock instance.
func NewMockReadable(ctrl *gomock.Controller) *MockReadable {
	mock := &MockReadable{ctrl: ctrl}
	mock.recorder = &MockReadableMockRecorder{mock}
	return mock
}

// NEW creates a MockReadable. This method is used internally by ensure.
func (*MockReadable) NEW(ctrl *gomock.Controller) *MockReadable {
	return NewMockReadable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockReadable) EXPECT() *MockReadableMockRecorder {
	return m.recorder
}

// ReadPackages mocks ReadPackages on Readable.
func (m *MockReadable) ReadPackages(_pkgDetails []*ifacereader.PackageDetails, _pkgNameGen ifacereader.PackageNameGenerator) ([]*ifacereader.Package, error) {
	m.ctrl.T.Helper()
	inputs := []interface{}{_pkgDetails, _pkgNameGen}
	ret := m.ctrl.Call(m, "ReadPackages", inputs...)
	ret0, _ := ret[0].([]*ifacereader.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPackages sets up expectations for calls to ReadPackages.
// Calling this method multiple times allows expecting multiple calls to ReadPackages with a variety of parameters.
//
// Inputs:
//
//	pkgDetails []*ifacereader.PackageDetails
//	pkgNameGen ifacereader.PackageNameGenerator
//
// Outputs:
//
//	[]*ifacereader.Package
//	error
func (mr *MockReadableMockRecorder) ReadPackages(_pkgDetails interface{}, _pkgNameGen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_pkgDetails, _pkgNameGen}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPackages", reflect.TypeOf((*MockReadable)(nil).ReadPackages), inputs...)
}
