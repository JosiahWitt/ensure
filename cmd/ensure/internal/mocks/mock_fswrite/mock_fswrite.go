// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: github.com/JosiahWitt/ensure/cmd/ensure/internal/fswrite (interfaces: Writable)

// Package mock_fswrite is a generated GoMock package.
package mock_fswrite

import (
	"github.com/golang/mock/gomock"
	"io/fs"
	"reflect"
)

// MockWritable is a mock of the Writable interface in github.com/JosiahWitt/ensure/cmd/ensure/internal/fswrite.
type MockWritable struct {
	ctrl     *gomock.Controller
	recorder *MockWritableMockRecorder
}

// MockWritableMockRecorder is the mock recorder for MockWritable.
type MockWritableMockRecorder struct {
	mock *MockWritable
}

// NewMockWritable creates a new mock instance.
func NewMockWritable(ctrl *gomock.Controller) *MockWritable {
	mock := &MockWritable{ctrl: ctrl}
	mock.recorder = &MockWritableMockRecorder{mock}
	return mock
}

// NEW creates a MockWritable. This method is used internally by ensure.
func (*MockWritable) NEW(ctrl *gomock.Controller) *MockWritable {
	return NewMockWritable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockWritable) EXPECT() *MockWritableMockRecorder {
	return m.recorder
}

// ListRecursive mocks ListRecursive on Writable.
func (m *MockWritable) ListRecursive(_dir string) ([]string, error) {
	m.ctrl.T.Helper()
	inputs := []interface{}{_dir}
	ret := m.ctrl.Call(m, "ListRecursive", inputs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecursive sets up expectations for calls to ListRecursive.
// Calling this method multiple times allows expecting multiple calls to ListRecursive with a variety of parameters.
//
// Inputs:
//
//  dir string
//
// Outputs:
//
//  []string
//  error
func (mr *MockWritableMockRecorder) ListRecursive(_dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_dir}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecursive", reflect.TypeOf((*MockWritable)(nil).ListRecursive), inputs...)
}

// MkdirAll mocks MkdirAll on Writable.
func (m *MockWritable) MkdirAll(_path string, _perm fs.FileMode) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_path, _perm}
	ret := m.ctrl.Call(m, "MkdirAll", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll sets up expectations for calls to MkdirAll.
// Calling this method multiple times allows expecting multiple calls to MkdirAll with a variety of parameters.
//
// Inputs:
//
//  path string
//  perm fs.FileMode
//
// Outputs:
//
//  error
func (mr *MockWritableMockRecorder) MkdirAll(_path interface{}, _perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_path, _perm}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockWritable)(nil).MkdirAll), inputs...)
}

// RemoveAll mocks RemoveAll on Writable.
func (m *MockWritable) RemoveAll(_paths string) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_paths}
	ret := m.ctrl.Call(m, "RemoveAll", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll sets up expectations for calls to RemoveAll.
// Calling this method multiple times allows expecting multiple calls to RemoveAll with a variety of parameters.
//
// Inputs:
//
//  paths string
//
// Outputs:
//
//  error
func (mr *MockWritableMockRecorder) RemoveAll(_paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_paths}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockWritable)(nil).RemoveAll), inputs...)
}

// WriteFile mocks WriteFile on Writable.
func (m *MockWritable) WriteFile(_filename string, _data string, _perm fs.FileMode) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_filename, _data, _perm}
	ret := m.ctrl.Call(m, "WriteFile", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile sets up expectations for calls to WriteFile.
// Calling this method multiple times allows expecting multiple calls to WriteFile with a variety of parameters.
//
// Inputs:
//
//  filename string
//  data string
//  perm fs.FileMode
//
// Outputs:
//
//  error
func (mr *MockWritableMockRecorder) WriteFile(_filename interface{}, _data interface{}, _perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_filename, _data, _perm}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockWritable)(nil).WriteFile), inputs...)
}
