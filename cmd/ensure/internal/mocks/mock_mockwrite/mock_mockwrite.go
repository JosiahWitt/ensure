// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: github.com/JosiahWitt/ensure/cmd/ensure/internal/mockwrite (interfaces: Writable)

// Package mock_mockwrite is a generated GoMock package.
package mock_mockwrite

import (
	"github.com/JosiahWitt/ensure/cmd/ensure/internal/ensurefile"
	"github.com/JosiahWitt/ensure/cmd/ensure/internal/ifacereader"
	"github.com/JosiahWitt/ensure/cmd/ensure/internal/mockgen"
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockWritable is a mock of the Writable interface in github.com/JosiahWitt/ensure/cmd/ensure/internal/mockwrite.
type MockWritable struct {
	ctrl     *gomock.Controller
	recorder *MockWritableMockRecorder
}

// MockWritableMockRecorder is the mock recorder for MockWritable.
type MockWritableMockRecorder struct {
	mock *MockWritable
}

// NewMockWritable creates a new mock instance.
func NewMockWritable(ctrl *gomock.Controller) *MockWritable {
	mock := &MockWritable{ctrl: ctrl}
	mock.recorder = &MockWritableMockRecorder{mock}
	return mock
}

// NEW creates a MockWritable. This method is used internally by ensure.
func (*MockWritable) NEW(ctrl *gomock.Controller) *MockWritable {
	return NewMockWritable(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockWritable) EXPECT() *MockWritableMockRecorder {
	return m.recorder
}

// TidyMocks mocks TidyMocks on Writable.
func (m *MockWritable) TidyMocks(_config *ensurefile.Config, _packages []*ifacereader.Package) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_config, _packages}
	ret := m.ctrl.Call(m, "TidyMocks", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TidyMocks sets up expectations for calls to TidyMocks.
// Calling this method multiple times allows expecting multiple calls to TidyMocks with a variety of parameters.
//
// Inputs:
//
//	config *ensurefile.Config
//	packages []*ifacereader.Package
//
// Outputs:
//
//	error
func (mr *MockWritableMockRecorder) TidyMocks(_config interface{}, _packages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_config, _packages}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TidyMocks", reflect.TypeOf((*MockWritable)(nil).TidyMocks), inputs...)
}

// WriteMocks mocks WriteMocks on Writable.
func (m *MockWritable) WriteMocks(_config *ensurefile.Config, _mocks []*mockgen.PackageMock) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_config, _mocks}
	ret := m.ctrl.Call(m, "WriteMocks", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMocks sets up expectations for calls to WriteMocks.
// Calling this method multiple times allows expecting multiple calls to WriteMocks with a variety of parameters.
//
// Inputs:
//
//	config *ensurefile.Config
//	mocks []*mockgen.PackageMock
//
// Outputs:
//
//	error
func (mr *MockWritableMockRecorder) WriteMocks(_config interface{}, _mocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_config, _mocks}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMocks", reflect.TypeOf((*MockWritable)(nil).WriteMocks), inputs...)
}
