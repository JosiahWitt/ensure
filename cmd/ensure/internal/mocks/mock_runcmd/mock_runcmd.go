// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JosiahWitt/ensure/cmd/ensure/internal/runcmd (interfaces: RunnerIface)

// Package mock_runcmd is a generated GoMock package.
package mock_runcmd

import (
	runcmd "github.com/JosiahWitt/ensure/cmd/ensure/internal/runcmd"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRunnerIface is a mock of RunnerIface interface
type MockRunnerIface struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerIfaceMockRecorder
}

// MockRunnerIfaceMockRecorder is the mock recorder for MockRunnerIface
type MockRunnerIfaceMockRecorder struct {
	mock *MockRunnerIface
}

// NewMockRunnerIface creates a new mock instance
func NewMockRunnerIface(ctrl *gomock.Controller) *MockRunnerIface {
	mock := &MockRunnerIface{ctrl: ctrl}
	mock.recorder = &MockRunnerIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunnerIface) EXPECT() *MockRunnerIfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockRunnerIface) Exec(arg0 *runcmd.ExecParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockRunnerIfaceMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRunnerIface)(nil).Exec), arg0)
}

// NEW creates a MockRunnerIface.
func (*MockRunnerIface) NEW(ctrl *gomock.Controller) *MockRunnerIface {
	return NewMockRunnerIface(ctrl)
}
