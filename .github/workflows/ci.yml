name: CI
on: [push]
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.20", "1.21", "1.22", "1.23", "1.24", "1.25.0-rc.1"]
        path: [".", "cmd/ensure", "exp/entable"]
        include:
          - path: "."
            flags: package
          - path: cmd/ensure
            flags: cli
          - path: exp/entable
            flags: entable
          - go-version: "1.25.0-rc.1"
            godebug: asynctimerchan=0
        exclude:
          - path: cmd/ensure # CLI requires Go 1.21+
            go-version: "1.20"

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Test `${{ matrix.path }}`
        run: |
          export GODEBUG=${{ matrix.godebug }}
          (cd ${{ matrix.path }}; go test -race -coverprofile=./coverage.txt -covermode=atomic ./...)

      - name: Upload `${{ matrix.path }}` coverage to codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ matrix.path }}/coverage.txt
          flags: ${{ matrix.flags }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.20", "1.21", "1.22", "1.23", "1.24", "1.25.0-rc.1"]
        path: [".", "cmd/ensure", "exp/entable"]
        exclude:
          - path: cmd/ensure # CLI requires Go 1.21+
            go-version: "1.20"
          - go-version: "1.25.0-rc.1" # TODO: Enable linting on 1.25 when it is no longer a RC

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Lint `${{ matrix.path }}`
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4.0
          working-directory: ${{ matrix.path }}

  staticcheck:
    name: Staticcheck
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Staticcheck requires Go 1.21+
        go-version: ["1.21", "1.22", "1.23", "1.24", "1.25.0-rc.1"]
        path: [".", "cmd/ensure", "exp/entable"]
        exclude:
          - path: cmd/ensure # Staticcheck isn't working for CLI on Go 1.21
            go-version: "1.21"
          - path: cmd/ensure # Staticcheck isn't working for CLI on Go 1.22
            go-version: "1.22"
          - go-version: "1.25.0-rc.1" # TODO: Enable Staticcheck on 1.25 when it is no longer a RC

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Staticcheck `${{ matrix.path }}`
        uses: dominikh/staticcheck-action@v1
        with:
          version: "2025.1.1"
          install-go: false
          working-directory: ${{ matrix.path }}

  regression-test:
    name: Regression Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # CLI requires Go 1.21+
        go-version: ["1.21", "1.22", "1.23", "1.24", "1.25.0-rc.1"]

    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Generate Package Mocks
        run: make generate-mocks

      - name: Generate CLI Mocks
        run: (cd cmd/ensure; make generate-mocks)

      - name: Run go fmt for package
        run: go fmt ./...

      - name: Run go fmt for CLI
        run: (cd cmd/ensure; go fmt ./...)

      - name: Git diff
        run: git diff

      - name: Verify mocks are up-to-date
        run: |
          git status --porcelain | grep mocks/ || true

          if [[ $(git status --porcelain | grep mocks/ 2> /dev/null) ]]; then
            echo "❌ Please run `make generate-mocks`";
            exit 1;
          else
            echo "✅ `make generate-mocks` was run";
          fi
